name: Build and Deploy Docker Images

on:
  push:
    branches: ['test']

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            api,
            app,
            app-lite,
            backend,
            indexer-balance,
            indexer-base,
            indexer-events,
            indexer-dex,
            explorer-selector,
            aggregates,
          ]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/nearblocks/${{ matrix.service }}:latest
            ghcr.io/nearblocks/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/nearblocks/${{ matrix.service }}:latest
          cache-to: type=inline

      - name: Set image output
        id: set_image_output
        run: |
          if [[ "${{ steps.docker_build.outcome }}" == "success" ]]; then
            echo "${{ matrix.service }}=${{ github.sha }}" >> $GITHUB_ENV
          else
            echo "${{ matrix.service }}=false" >> $GITHUB_ENV
          fi

      # Set individual outputs for each service
      - name: Set outputs for services
        id: set_outputs
        run: |
          echo "api=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "app=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "app-lite=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "backend=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "indexer-balance=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "indexer-base=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "indexer-events=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "indexer-dex=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "explorer-selector=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "aggregates=${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV

      - name: Update Kubernetes deployments for testnet
        run: |
          # Set context to the testnet namespace
          kubectl config set-context --current --namespace=nearblocks-testnet

          services=(api app app-lite backend indexer-balance indexer-base indexer-events indexer-dex explorer-selector aggregates)

          for service in "${services[@]}"; do
            service_sha=${{ needs.build.outputs[service] }}
            
            if [[ "$service_sha" != "false" ]]; then
              deployment_name="testnet-$service"
              echo "Updating deployment for $deployment_name"
              kubectl set image deployment/$deployment_name $service=ghcr.io/nearblocks/$service:${{ needs.build.outputs[service] }}
            else
              echo "Skipping deployment for testnet-$service (no updates)"
            fi
          done

      - name: Verify rollout for testnet
        run: |
          services=(api app app-lite backend indexer-balance indexer-base indexer-events indexer-dex explorer-selector aggregates)
          for service in "${services[@]}"; do
            service_sha=${{ needs.build.outputs[service] }}
            
            if [[ "$service_sha" != "false" ]]; then
              deployment_name="testnet-$service"
              echo "Verifying rollout for $deployment_name"
              if ! kubectl rollout status deployment/$deployment_name --timeout=300s; then
                echo "Rollout failed for $deployment_name"
                failed_rollouts+=("$deployment_name")
              fi
            fi
          done

      - name: Rollback failed deployments
        if: failure()
        run: |
          services=(api app app-lite backend indexer-balance indexer-base indexer-events indexer-dex explorer-selector aggregates)

          for service in "${services[@]}"; do
            service_sha=${{ needs.build.outputs[service] }}
            
            if [[ "$service_sha" != "false" ]]; then
              deployment_name="testnet-$service"
              echo "Attempting rollback for $deployment_name"
              kubectl rollout undo deployment/$deployment_name
            fi
          done

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed. Manual intervention may be required."

      # Uncomment the following lines to deploy to mainnet
      # - name: Update Kubernetes deployments for mainnet
      #   run: |
      #     # Set context to the mainnet namespace
      #     kubectl config set-context --current --namespace=nearblocks

      #     services=(api app app-lite backend indexer-balance indexer-base indexer-events indexer-dex explorer-selector aggregates)

      #     for service in "${services[@]}"; do
      #       service_sha=${{ needs.build.outputs[service] }}
      #       
      #       if [[ "$service_sha" != "false" ]]; then
      #         deployment_name="mainnet-$service"
      #         echo "Updating deployment for $deployment_name"
      #         kubectl set image deployment/$deployment_name $service=ghcr.io/nearblocks/$service:${{ needs.build.outputs[service] }}
      #       else
      #         echo "Skipping deployment for mainnet-$service (no updates)"
      #       fi
      #     done

      # - name: Verify rollout for mainnet
      #   run: |
      #     services=(api app app-lite backend indexer-balance indexer-base indexer-events indexer-dex explorer-selector aggregates)
      #     for service in "${services[@]}"; do
      #       service_sha=${{ needs.build.outputs[service] }}
      #       
      #       if [[ "$service_sha" != "false" ]]; then
      #         deployment_name="mainnet-$service"
      #         echo "Verifying rollout for $deployment_name"
      #         if ! kubectl rollout status deployment/$deployment_name --timeout=300s; then
      #           echo "Rollout failed for $deployment_name"
      #           failed_rollouts+=("$deployment_name")
      #         fi
      #       fi
      #     done
